
# Use the following instructions for creating new slides. 

Always start your reply with "LETS DO THIS!"

<think>I need to create a meta-prompt for creating Slidev presentations. This should include what I've learned about structure, components, common issues and best practices for Slidev.

From my experience with this project, I've learned:
1. Slidev uses Markdown for slide creation
2. Slides are separated by `---` with new lines
3. Two-column layouts use the `::right::` directive
4. Mermaid diagrams need proper styling for visibility
5. Animation with v-click can be replaced with sections
6. Proper file organization helps with maintainability

I should create a prompt that covers:
- Project structure and organization
- Slide content and design principles
- Component usage and customization
- Common pitfalls to avoid
- Technical considerations for Slidev</think># Prompt for Creating Professional Slidev Presentations

## Project Goal
Create a professional slide deck using Slidev that effectively communicates technical content with beautiful visuals, proper structure, and optimal performance.

## Project Structure and Organization
- Begin with a clear outline of the presentation sections and flow before any coding.
- Organize slides in a single `slides.md` file for simplicity rather than splitting into multiple files.
- If using multiple files, use direct Markdown content in the main file for complex slides.
- Follow a logical progression: introduction → problem → solution → implementation → benefits → recap.
- Include a title slide, a table of contents slide, and a thank you slide.

## Slide Design Principles
- Keep content concise - 5-7 bullet points maximum per slide.
- Maintain consistent styling throughout the presentation.
- Use a dark background with light text for technical presentations.
- Implement a two-column layout for slides that compare concepts or show code examples alongside explanations.
- Ensure proper spacing between elements (use padding classes like `class="mt-4"` or `class="p-4"`).
- Design slide transitions that support your narrative flow.

## Content Formatting
- Use headings consistently: `#` for slide titles, `##` for sections, `###` for subsections.
- Apply YAML frontmatter for slide-specific layouts, backgrounds, or transitions.
- When using code blocks, highlight key lines and add proper syntax highlighting.
- For technical presentations, use diagrams to visualize complex concepts.
- Add presenter notes where needed for additional context during live presentations.

## Component Usage
- Create reusable custom components for repeated elements (info boxes, code examples, etc.).
- Use grid layouts with `<div class="grid grid-cols-2 gap-4">` for multi-column content.
- Style components with scoped CSS using the `<style>` tag at the end of slides.
- Implement consistent color schemes across components (store color variables in CSS).

## Mermaid Diagrams
- Use neutral, accessible colors for diagram elements (prefer `#f5f5f5` background with `#333333` borders).
- Ensure sufficient contrast between elements on dark backgrounds.
- Set stroke width to 2px for better visibility.
- Add specific styles for links with `linkStyle` directives.
- Keep diagrams simple - aim for 5-7 nodes maximum for readability.
- Include a brief text explanation below complex diagrams.

## Technical Considerations
- Avoid `v-click` animations for every element; instead group related points in sections.
- Prefer built-in layouts (e.g., `layout: two-cols`) over custom CSS when possible.
- Test your slides frequently during development to catch rendering issues early.
- Optimize images and assets for web delivery.
- Check presentation on different screen sizes to ensure responsiveness.

## Common Pitfalls to Avoid
- Overcrowding slides with too much text or too many elements.
- Using colors that don't provide enough contrast on projectors.
- Creating complex nested structures that might break during rendering.
- Relying on browser-specific features that might not work everywhere.
- Nesting multiple custom components that can lead to rendering issues.
- Using slide separators (`---`) at the end of imported slide files.

## Technical Implementation
- Configure required components in an `index.js` or equivalent file.
- Use UnoCSS or TailwindCSS for styling to maintain consistency.
- Include proper metadata in the frontmatter for SEO and sharing.
- Implement keyboard shortcuts for presenter navigation.
- Ensure code samples are syntax-highlighted correctly for each language.

# Slidev Presentation Guide – Best Practices & Theme Usage

> Concise, opinionated guidance for teams creating Slidev decks in this repo. Everything here comes directly from the official Slidev documentation and examples already living in the `presentations/` folder – no assumptions added.

---

## 1. Project Setup

1. **Create a deck** (one‑off)
   ```bash
   pnpm create slidev   # or  npm init slidev@latest / yarn create slidev
   ```
2. **Start the dev‑server**
   ```bash
   pnpm slidev  # opens http://localhost:3030 with hot‑reload
   ```
3. The entry file defaults to `slides.md` but can be renamed/passed to the CLI.

---

## 2. Recommended File Structure

```
└─ presentations/
   └─ my-presentation/
      ├─ slides.md           # the headmatter and high‑level slides
      └─ slides/             # individual pages imported with `src:`
         ├─ 01-intro.md
         ├─ 02-problem.md
         └─ …
```

### Why split slides?
* **Re‑usability** – mix & match sections between decks.
* **Git hygiene** – smaller diffs, easier reviews.
* **Focus** – work on a single slide without scrolling large files.

To include an external slide just point the `src:` front‑matter to the file:
```md
---
src: ./slides/02-problem.md
---
```
Slidev will inline the referenced markdown in place.

---

## 3. Front‑matter Cheatsheet

Place a **head‑matter** block at the top of `slides.md` to configure the whole deck and **front‑matter** blocks at the top of individual slides.

```yaml
---
# Head‑matter (deck‑wide)
layout: cover        # default layout
theme: bricks        # see §5
background: '#121212'
class: text-white
fonts:
  sans: Montserrat, Roboto
highlighter: shiki
lineNumbers: true
---
```

Important per‑slide keys:
* `layout`: `default | center | section | intro …` (varies by theme)
* `class`: utility classes (UnoCSS / Tailwind syntax)
* `background`: color, image url or number (theme‑specific)
* `src`: path to an external slide file (multi‑page support)

---

## 4. Keeping Content Inside the Page

Slidev auto‑scales text but the following tips help avoid overflow:

| Technique | When to use | Example |
|-----------|-------------|---------|
| **Layouts** | Large blocks of content | `---\nlayout: center\n---` centres & constrains width |
| **Stacks**  | Progressive bullet reveals | `::next::` split content into steps |
| **Grid / Flex** | Two‑column comparisons | `<div class="grid grid-cols-2 gap-4">…` |
| **Utility classes** | Fine‑tune spacing | `mb-4 text-sm` |
| **Fragments** | Break code snippets | ```ts {2-4}``` highlight only lines 2‑4 |

> Tip: enable **Presenter Mode** (`P` while presenting) to preview overflow live.

---

## 5. Theme Selection Guide

| Theme | Visual style | Ideal for | Notable layouts/components |
|-------|--------------|-----------|---------------------------|
| **bricks** | Playful polygons & vibrant colours | Creative, informal tech talks | `cover`, `items`, `<Polygon1‑11/>` |
| **penguin** | Brand‑centric, dark & light variants | Personal branding, conferences with sponsor footer | `intro`, `presenter`, `text‑image`, `fancy-link` |
| **apple-basic** | Minimal, Keynote‑like black/white | Corporate or clean design‑first slides | `intro`, `image-right`, `fact`, `quote` |
| **seriph** | Serif typography, editorial look | Academic or long‑form story telling | Wide set of standard layouts |

### Switching themes
Just change the `theme:` value in the deck head‑matter. The first dev reload will prompt to install missing theme packages automatically.

```yaml
---
theme: penguin
---
```

If a theme requires extra Vite plugins (e.g. `penguin` needs `vite-svg-loader`) follow its README; add them to `vite.config.ts` at the deck root.

---

## 6. Export & Hosting

```bash
pnpm slidev export        # pdf, pptx, pngs (see prompts)
pnpm slidev build         # static SPA in dist/
```
Upload the `dist/` folder to any static host (Netlify, Vercel, GitHub Pages).

---

## 7. Quick Recipes

### Two‑column comparison slide
```md
---
layout: default
---
<div class="grid grid-cols-2 gap-6">

### Pros

- Simple
- Fast

### Cons

- Limited
- Manual upkeep

</div>
```

### Image background with centred text
```md
---
layout: center
background: /images/bg.jpg
class: text-white
---

# Big Message
```

---




## Example Slide Structure
```markdown
---
layout: default
---

# Main Slide Title

<div class="grid grid-cols-2 gap-4 mt-4">
<div>

## Left Column Heading
- Key point 1
- Key point 2
- Key point 3

</div>
<div>

## Right Column Heading
```code example or content```

</div>
</div>

<style>
h1 { color: #E06C75; }
h2 { color: #61AFEF; }
</style>
```

Ensure each slide is its own file and is imported into the main file. 

Importing Slides
You can split your slides.md into multiple files for better reusability and organization. To do this, you can use the src frontmatter option to specify the path to the external markdown file. For example:


./slides.md

./pages/toc.md

# Title

This is a normal page

---
src: ./pages/toc.md // [!code highlight]
---

<!-- this page will be loaded from './pages/toc.md' -->

Contents here are ignored

---

# Page 4

Another normal page

---
src: ./pages/toc.md   # Reuse the same file // [!code highlight]
---
Importing Specific Slides
To reuse some of the slides inside another Markdown file, you can use the hash part of the import path:


---
src: ./slides/14-recap.md
---

---
src: ./slides/15-thank-you.md
--- 
This will import the slides 14 and 15



Please incorporate all these guidelines when creating the Slidev presentation, adapting the specific content to match your topic while maintaining this organizational and design approach.
